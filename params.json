{"name":"A-star-implementation","tagline":"Learning Phaser library for html5 based rendering. Implementation of A* algorithm in a navigation mesh.","body":"<!doctype html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"UTF-8\" />\r\n        <title>hello phaser!</title>\r\n        <script src=\"js/phaser.js\"></script>\r\n        <script src=\"js/game/myNameSpace.js\"></script>\r\n    </head>\r\n<body>\r\n\r\n<script type=\"text/javascript\">\r\nwindow.onload = function() {\r\n    var game = new Phaser.Game(800, 800, Phaser.CANVAS, 'what is this text', { preload: preload, create: create, update: update, render: render });\r\n\r\n    function preload() {\r\n        game.load.tilemap(\"map\", \"assets/map.json\", null, Phaser.Tilemap.TILED_JSON);\r\n    }\r\n\r\n    var path = [];\r\n    var pathIndex = 1;\r\n    var walls;\r\n    var navMesh;\r\n    var player;\r\n    var target = [];\r\n    var renderableNodes;\r\n    var navMeshLines = [];\r\n    function create() {\r\n        game.physics.startSystem(Phaser.Physics.ARCADE);\r\n\r\n        player = addPlayerToGame();\r\n        player.anchor.setTo(0.5, 0.5);\r\n        game.physics.arcade.enableBody(player);\r\n\r\n        walls = game.add.group();\r\n        walls.enableBody = true;\r\n\r\n        var map = game.add.tilemap(\"map\");\r\n\r\n        var navMeshLayer = ns.mapLoader.getLayerByName(map, \"nav mesh\");\r\n        navMeshLines = ns.mapLoader.getPolygonObjectsAsLines(navMeshLayer);\r\n\r\n        var wallLayer = ns.mapLoader.getLayerByName(map, \"walls\");\r\n        addWallsToGame(wallLayer);\r\n\r\n        navMesh = new ns.NavMesh();\r\n        navMesh.buildNavMesh(navMeshLayer);\r\n        navMesh.resetParentsAndCosts();\r\n\r\n        renderableNodes = renderableNodes(navMesh);\r\n\r\n        game.input.onDown.add(function() {\r\n            target.push(game.input.mousePointer.x);\r\n            target.push(game.input.mousePointer.y);\r\n            pathIndex = 1;\r\n            path = [];\r\n        }, window);\r\n    }\r\n\r\n\r\n    function update() {\r\n        game.physics.arcade.collide(player, walls);\r\n\r\n        var node = navMesh.getNodePositionIsIn(player.x, player.y);\r\n        if (target.length > 0) {\r\n            var targetNode = navMesh.getNodePositionIsIn(target[0], target[1]);\r\n\r\n            path = ns.PathFinder.findPath(node, targetNode);\r\n            console.log(path);\r\n            navMesh.resetParentsAndCosts();\r\n\r\n            target = [];\r\n        }\r\n\r\n        if (path.length > 1) {\r\n            player.body.velocity.x = 0;\r\n            player.body.velocity.y = 0;\r\n\r\n            var currentTarget = path[pathIndex];\r\n\r\n            var directionalVelocity = ns.getDirectionalVelocity(player, currentTarget, 60);\r\n            var velocityX = directionalVelocity[0];\r\n            var velocityY = directionalVelocity[1];\r\n\r\n            if (Math.abs(Math.round(player.x) - Math.round(currentTarget.x)) < 3 && Math.abs(Math.round(player.y) - Math.round(currentTarget.y)) < 3) {\r\n                if (pathIndex < path.length - 1) {\r\n                    pathIndex++;\r\n                }\r\n                else {\r\n                    path = [];\r\n                    pathIndex = 1;\r\n                }\r\n            }\r\n            else {\r\n                player.body.velocity.x = velocityX;\r\n                player.body.velocity.y = velocityY;\r\n            }\r\n        }\r\n\r\n        // player.body.velocity.y = 0;\r\n        // player.body.velocity.x = 0;\r\n        // player.body.velocity.y = -100;\r\n    }\r\n\r\n    function render() {\r\n        for (var i = 0; i < navMeshLines.length; i++) {\r\n            game.debug.geom(navMeshLines[i], \"#FF6600\");\r\n        }\r\n\r\n        for (var i = 0; i < renderableNodes.length; i++) {\r\n            game.debug.geom(renderableNodes[i], \"#FF6600\");\r\n        }\r\n    }\r\n\r\n    //NON-PHASER ENGINE FUNCTIONS\r\n    function renderableNodes(navMesh) {\r\n        this.nodes = [];\r\n        var nodes = navMesh.getNodes();\r\n\r\n        var nodeKeys = Object.keys(nodes);\r\n        for (var k = 0; k < nodeKeys.length; k++) {\r\n            var node = nodes[nodeKeys[k]];\r\n            var circle = new Phaser.Circle(node.x, node.y, 5);\r\n            this.nodes.push(circle);\r\n        }\r\n\r\n        return this.nodes;\r\n    }\r\n\r\n    function addPlayerToGame() {\r\n        var width = 10;\r\n        var height = 10;\r\n\r\n        var x = 400;\r\n        var y = 100;\r\n\r\n        var bmd = createRectangleBMD(width, height, \"white\");\r\n        return game.add.sprite(x, y, bmd);\r\n    }\r\n\r\n    function addWallsToGame(rectangleLayer) {\r\n        for (var i = 0; i < rectangleLayer.length; i++) {\r\n            var object = rectangleLayer[i];\r\n\r\n            var bmd = createRectangleBMD(object.width, object.height, \"blue\");\r\n\r\n            var wall = walls.create(object.x, object.y, bmd);\r\n            wall.body.immovable = true;\r\n            // game.add.sprite(object.x, object.y, bmd);\r\n        }\r\n    }\r\n\r\n    function createRectangleBMD(width, height, color) {\r\n        var bmd = game.add.bitmapData(width, height);\r\n        bmd.ctx.fillStyle = color;\r\n        bmd.ctx.fillRect(0, 0, width, height);\r\n\r\n        return bmd;\r\n    }\r\n}\r\n</script>\r\n\r\n</body>\r\n</html>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}